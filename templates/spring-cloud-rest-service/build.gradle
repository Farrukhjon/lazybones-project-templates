/*
 * Copyright (c) 2015. Farrukhjon D. Sattorov firedandy@gmail.com.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorPluginVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.asciidoctor.convert'

apply from: "$rootDir/gradle/repositories.gradle"
apply from: "$rootDir/gradle/spring-boot.gradle"
apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/groovy.gradle"
apply from: "$rootDir/gradle/cucumber-jvm.gradle"
apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/maven-publish.gradle"
apply from: "$rootDir/gradle/other.gradle"
apply from: "$rootDir/gradle/spock.gradle"
apply from: "$rootDir/gradle/codenarc.gradle"
apply from: "$rootDir/gradle/testing.gradle"
apply from: "$rootDir/gradle/version.gradle"
apply from: "$rootDir/gradle/docker.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'clean', 'build', 'check'

if ('true' == runIntegrationTests) {
    defaultTasks += ['outboundIntegrationTests', 'inboundIntegrationTests', 'acceptanceTests']
}

if ('true' == buildDockerImage) {
    defaultTasks << 'buildDockerImage'
}

/*if ('master' == branch) {
    defaultTasks += ['publishToMavenLocal']
}*/

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn test
}

jar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
